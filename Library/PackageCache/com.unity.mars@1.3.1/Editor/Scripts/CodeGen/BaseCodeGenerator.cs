using System;
using System.IO;
using System.Text;
using UnityEngine;

namespace Unity.MARS.CodeGen
{
    abstract class BaseCodeGenerator : IGeneratesCode
    {
        const string k_GeneratedFileWarning = "// This file is automatically generated - DO NOT EDIT MANUALLY!";
        static string s_SummaryTemplate;
        static readonly string k_SummaryTemplateBase = "{0}///<summary>{1}</summary>";
        protected const int k_StartingIndentLevel = 2;

        protected string m_Indent;

        protected readonly StringBuilder m_Builder = new StringBuilder();
        protected static readonly StringBuilder k_WriteBuilder = new StringBuilder();


        protected string NewLine { get; }

        public abstract string TemplateFileName { get; }
        public abstract string OutputFileName { get; }

        public string BufferContents { get; protected set; }


        public virtual GeneratedTypeSet TypeSet { get; } = GeneratedTypeSet.Conditions;

        protected BaseCodeGenerator()
        {
            try
            {
                var path = CodeGenerationShared.TemplatesFolder + TemplateFileName;
                var templateContents = File.ReadAllText(path);

                // figure out what line endings the template is using and use those for consistency.
                // this is necessary because the templates' line endings may be changed by git's 'autocrlf' setting
                const string crlf = "\r\n";
                var firstCrlfIndex = templateContents.IndexOf(crlf);
                if (firstCrlfIndex != -1)
                {
                    NewLine = crlf;
                }
                else
                {
                    var firstLineFeedIndex = templateContents.IndexOf('\n');
                    NewLine = firstLineFeedIndex != -1 ? "\n" : Environment.NewLine;
                }

                s_SummaryTemplate = k_SummaryTemplateBase + NewLine;

                BufferContents = k_GeneratedFileWarning + NewLine + templateContents;
            }
            catch (Exception e)
            {
                Debug.LogException(e);
            }

            ChangeIndent(k_StartingIndentLevel);
        }

        public abstract bool TryGenerateCode(CodeGenerationTypeData[] typeData);

        protected void WriteBlock(string toReplace, CodeGenerationTypeData[] codeGenerationTypeData,
            Func<CodeGenerationTypeData, string> writeSingle, bool withNewline = true, Func<string, string> afterAll = null)
        {
            m_Builder.Clear();
            var length = codeGenerationTypeData.Length;
            for (var i = 0; i < length; i++)
            {
                var block = writeSingle(codeGenerationTypeData[i]);
                if (string.IsNullOrEmpty(block))
                    continue;

                m_Builder.Append(block);
                if (withNewline && i < length - 1)
                    m_Builder.Append(NewLine);
            }

            var builtString = m_Builder.ToString();
            builtString = afterAll == null ? builtString : afterAll.Invoke(builtString);

            // Capture the newline in search string to overwrite it
            toReplace += NewLine;
            BufferContents = BufferContents.Replace(toReplace, builtString);
        }

        protected bool TryWriteToFile()
        {
            try
            {
                File.WriteAllText(CodeGenerationShared.OutputFolder + OutputFileName, BufferContents);
                return true;
            }
            catch (Exception e)
            {
                Debug.LogException(e);
                return false;
            }
        }

        protected void WriteLine(string text = "")
        {
            if (text != string.Empty)
            {
                k_WriteBuilder.Append(m_Indent);
                k_WriteBuilder.Append(text);
            }

            k_WriteBuilder.Append(NewLine);
        }

        protected void WriteSummary(string text)
        {
            k_WriteBuilder.AppendFormat(s_SummaryTemplate, m_Indent, text);
        }

        protected string DumpBufferContents()
        {
            var output = k_WriteBuilder.ToString();
            k_WriteBuilder.Clear();
            return output;
        }

        /// <summary>
        /// Change the number of tabs-as-spaces to insert before the first character of a line
        /// </summary>
        /// <param name="level">The number of tabs</param>
        protected void ChangeIndent(int level)
        {
            var indent = "";
            for (var i = 0; i < level; i++)
            {
                indent += CodeGenerationShared.Indent;
            }

            m_Indent = indent;
        }

        protected static string GetConditionTypeInterface(Type type)
        {
            return type == typeof(bool) ? "ISemanticTagCondition" : $"ICondition<{type.FullName}>";
        }

        protected static string GetRelationTypeInterface(Type type)
        {
            return $"IRelation<{type.FullName}>";
        }
    }
}

